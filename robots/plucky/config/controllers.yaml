controller_manager:     # target node name
  ros__parameters:
    update_rate: 30 # Hz
    #use_sim_time: false

    diff_cont:
      type: diff_drive_controller/DiffDriveController

    joint_broad:
      type: joint_state_broadcaster/JointStateBroadcaster

    sonar_broadcaster_F_L:
      type: range_sensor_broadcaster/RangeSensorBroadcaster

    sonar_broadcaster_F_R:
      type: range_sensor_broadcaster/RangeSensorBroadcaster

    sonar_broadcaster_B_L:
      type: range_sensor_broadcaster/RangeSensorBroadcaster

    sonar_broadcaster_B_R:
      type: range_sensor_broadcaster/RangeSensorBroadcaster

diff_cont:
  ros__parameters:

    # See http://wiki.ros.org/diff_drive_controller  
    #     https://control.ros.org/jazzy/doc/ros2_controllers/diff_drive_controller/doc/userdoc.html
    #     https://github.com/ros-controls/ros2_controllers/blob/master/diff_drive_controller/src/diff_drive_controller_parameter.yaml

    publish_rate: 50.0

    # Name of frame to publish odometry in. Default: "/odom"
    odom_frame_id: 'odom'

    # Base frame_id, which is used to fill in the child_frame_id of the Odometry messages and TF. Default: base_link
    base_frame_id: base_link
    #base_frame_id: base_footprint

    # Publish to TF directly transformation between odom_frame_id and base_frame_id. Default: true
    # make it false, or there will be a lot of jumping and wheels will be sepatared from the body.
    # Odometry fused with IMU is published by robot_localization, so no need to publish a TF based on encoders alone.
    enable_odom_tf: false

    use_stamped_vel: true

    left_wheel_names: ["left_wheel_joint"]
    right_wheel_names: ["right_wheel_joint"]

    wheels_per_side: 1

    wheel_separation: 0.60             # distance between left and right wheels
    wheel_radius: 0.192

    # adjust so that when robot rotates in place the odom vector rotation follows it exactly.
    # expect multipliers to be 1.0 (default) when position_feedback: true, open_loop: false
    wheel_separation_multiplier: 1.0
    left_wheel_radius_multiplier: 1.0
    right_wheel_radius_multiplier: 1.0

    # Is there position feedback from hardware (wheel encoders), default to "true":
    position_feedback: true
    # If set to true the odometry of the robot will be calculated from the commanded values and not from feedback.
    # default to "false":
    open_loop: false

    pose_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
    twist_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]

    # Timeout in seconds, after which input command on ``cmd_vel`` topic is considered staled:
    cmd_vel_timeout: 1.0

    # publish_limited_velocity: true
    # velocity_rolling_window_size: 10

    # Velocity and acceleration limits - no need for Plucky

#
# By default, published values for *_wheel_joint and *_caster_wheel_joint will appear
#    under /joint_states topic (position and velocity changing, effort 0)
#    there is no need to configure joint_state_broadcaster explicitly,
#    anything defined in rsp.launch.py will be published.
#
#joint_broad:
#  ros__parameters:
#    interfaces:
##      - effort
#      - position
##      - velocity
#    joints:
#      - left_wheel_joint
#      - right_wheel_joint
##    extra_joints:
##    map_interface_to_joint_state:
##      effort: effort
##      position: position
##      velocity: velocity
## "true" means the topic will be /joint_broad/joint_states, false - /joint_states:
#    use_local_topics: false

#joint_broad:
#  ros__parameters:
#    joints:
#      - left_wheel_joint
#      - right_wheel_joint
#    extra_joints:
#      - left_caster_wheel_joint
#      - right_caster_wheel_joint

# Plucky has four sensors on all four corners.
# see https://control.ros.org/jazzy/doc/ros2_controllers/range_sensor_broadcaster/doc/userdoc.html
#     https://github.com/ros-controls/ros2_controllers/blob/master/range_sensor_broadcaster/src/range_sensor_broadcaster.cpp
#     https://github.com/slgrobotics/Misc/tree/master/Arduino/Sketchbook/PluckyWheelsROS
#     https://github.com/slgrobotics/diffdrive_arduino/tree/main
#     https://github.com/slgrobotics/Misc/tree/master/Arduino/Sketchbook/ParkingSensorI2C
sonar_broadcaster_F_L:
  ros__parameters:
    field_of_view: 0.1
    frame_id: 'sonar_F_L_frame'
    max_range: 2.5
    min_range: 0.01
    radiation_type: 0   # ULTRASOUND=0 INFRARED=1
    sensor_name: 'sonar_F_L'
    variance: 0.01

sonar_broadcaster_F_R:
  ros__parameters:
    field_of_view: 0.1
    frame_id: 'sonar_F_R_frame'
    max_range: 2.5
    min_range: 0.01
    radiation_type: 0   # ULTRASOUND=0 INFRARED=1
    sensor_name: 'sonar_F_R'
    variance: 0.01

sonar_broadcaster_B_L:
  ros__parameters:
    field_of_view: 0.1
    frame_id: 'sonar_B_L_frame'
    max_range: 2.5
    min_range: 0.01
    radiation_type: 0   # ULTRASOUND=0 INFRARED=1
    sensor_name: 'sonar_B_L'
    variance: 0.01

sonar_broadcaster_B_R:
  ros__parameters:
    field_of_view: 0.1
    frame_id: 'sonar_B_R_frame'
    max_range: 2.5
    min_range: 0.01
    radiation_type: 0   # ULTRASOUND=0 INFRARED=1
    sensor_name: 'sonar_B_R'
    variance: 0.01

