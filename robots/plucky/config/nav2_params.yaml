#
# copied from /opt/ros/jazzy/share/nav2_bringup/params/nav2_params.yaml
#
# see https://docs.nav2.org/configuration/index.html
#     https://automaticaddison.com/ros-2-navigation-tuning-guide-nav2/
#     https://github.com/slgrobotics/robots_bringup/blob/main/Docs/ROS-Jazzy/README-BT.md
#

# see https://docs.nav2.org/configuration/packages/configuring-amcl.html
amcl:
  ros__parameters:
    enable_stamped_cmd_vel: true
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    base_frame_id: "base_footprint"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 12.0
    laser_min_range: 0.35
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 0.5  # delay in transform (tf) data that is tolerable in seconds
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: scan

# see https://docs.nav2.org/configuration/packages/configuring-bt-navigator.html
bt_navigator:
  ros__parameters:
    enable_stamped_cmd_vel: true
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /diff_cont/odom   # works, but probably the worst of odom topics
    #odom_topic: /odometry/gps     # can't use it, orientation is always 0
    #odom_topic: /odometry/local   # works
    #odom_topic: /odometry/global  # works
    bt_loop_duration: 10
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    action_server_result_timeout: 900.0

    # Two navigators and their trees supporting different RViz2 mouse-click navigation modes: 
    navigators: ["navigate_to_pose", "navigate_through_poses"]
    # These two lines should be here for the param_substitutions in "*_nav.launch.py" to work:
    default_nav_to_pose_bt_xml: "/opt/ros/jazzy/share/nav2_bt_navigator/behavior_trees/navigate_to_pose_w_replanning_and_recovery.xml"
    default_nav_through_poses_bt_xml: "/opt/ros/jazzy/share/nav2_bt_navigator/behavior_trees/navigate_through_poses_w_replanning_and_recovery.xml"
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"

      # /opt/ros/jazzy/share/nav2_bt_navigator/behavior_trees/navigate_to_pose_w_replanning_goal_patience_and_recovery.xml

    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.

    # plugin_lib_names is used to add custom BT plugins to the executor (vector of strings).
    # Built-in plugins are added automatically
    # plugin_lib_names: []

    error_code_names:
      - compute_path_error_code
      - follow_path_error_code

# See https://docs.ros.org/en/jazzy/p/nav2_mppi_controller/index.html
#     https://docs.nav2.org/configuration/packages/configuring-controller-server.html
controller_server:
  ros__parameters:
    enable_stamped_cmd_vel: true
    controller_frequency: 24.0
    costmap_update_timeout: 0.30
    odom_topic: /diff_cont/odom   # works, but probably the worst of odom topics
    #odom_topic: /odometry/gps     # can't use it, orientation is always 0
    #odom_topic: /odometry/local   # works
    #odom_topic: /odometry/global  # works
    min_x_velocity_threshold: 0.0001
    min_y_velocity_threshold: 0.0001
    min_theta_velocity_threshold: 0.0001
    failure_tolerance: 0.5
    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]
    use_realtime_priority: false

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.1
      movement_time_allowance: 10.0
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.3
      yaw_goal_tolerance: 0.05 # default: 0.05 - the tolerance in radians for the controller in yaw/rotation when achieving its goal
      latch_xy_goal_tolerance: true # default: false - If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so.
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      time_steps: 56
      model_dt: 0.05
      batch_size: 2000
      ax_max: 3.0
      ax_min: -3.0
      ay_max: 3.0
      az_max: 3.5
      vx_std: 0.2
      vy_std: 0.2
      wz_std: 0.4
      vx_max: 0.5
      vx_min: -0.35
      vy_max: 0.5
      wz_max: 1.9
      iteration_count: 1
      prune_distance: 1.7
      transform_tolerance: 0.5  # delay in transform (tf) data that is tolerable in seconds
      temperature: 0.3
      gamma: 0.015
      motion_model: "DiffDrive"
      visualize: true
      regenerate_noises: true
      TrajectoryVisualizer:
        trajectory_step: 5
        time_step: 3
      AckermannConstraints:
        min_turning_r: 0.1
      critics: [
        "ConstraintCritic", "CostCritic", "GoalCritic",
        "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic",
        "PathAngleCritic", "PreferForwardCritic"]
      ConstraintCritic:
        enabled: true
        cost_power: 1
        cost_weight: 4.0
      GoalCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 1.4
      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.0
        threshold_to_consider: 0.5
      PreferForwardCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 0.5
      CostCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.81
        critical_cost: 300.0
        consider_footprint: true
        collision_cost: 1000000.0
        near_goal_distance: 1.0
        trajectory_point_step: 2
      PathAlignCritic:
        enabled: true
        cost_power: 1
        cost_weight: 14.0
        max_path_occupancy_ratio: 0.05
        trajectory_point_step: 4
        threshold_to_consider: 0.5
        offset_from_furthest: 20
        use_path_orientations: false
      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        offset_from_furthest: 5
        threshold_to_consider: 1.4
      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 4
        threshold_to_consider: 0.5
        max_angle_to_furthest: 1.0
        mode: 0
      # TwirlingCritic:
      #   enabled: true
      #   twirling_cost_power: 1
      #   twirling_cost_weight: 10.0

# see https://docs.nav2.org/configuration/packages/configuring-costmaps.html
local_costmap:
  local_costmap:
    ros__parameters:
      enable_stamped_cmd_vel: true
      unknown_cost_value: 255 # slightly less than 255 to be more explorative, 0 - to prohibit planning into un-scanned space
      #lethal_cost_threshold: 100
      #Added above to improve slam exploration - 
      # see https://pastebin.com/spGSypvX
      #     https://robotics.stackexchange.com/questions/104215/gpsnavigation2-issues-navigating-with-an-empty-map-after-success-with-a-pre-b
      update_frequency: 6.0
      publish_frequency: 2.0
      global_frame: map
      robot_base_frame: base_link
      static_map: false
      rolling_window: true
      width: 50
      height: 50
      resolution: 0.05
      transform_tolerance: 0.5  # delay in transform (tf) data that is tolerable in seconds
      robot_radius: 0.33
      #footprint: "[[-0.75, -0.35], [-0.75, 0.35], [0.40, 0.35], [0.40, -0.35]]"
      # Try: remove static_layer?
      plugins: ["static_layer", "obstacle_layer", "inflation_layer", "sonar_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        # see http://wiki.ros.org/costmap_2d/hydro/inflation
        cost_scaling_factor: 3.0
        # see http://wiki.ros.org/costmap_2d/hydro/inflation
        inflation_radius: 0.34  # must be larger than robot footprint
      obstacle_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.1
        z_voxels: 16
        max_obstacle_height: 1.6
        min_obstacle_height: 0.2 # IGNORING GROUND AS OBSTACLE AND SMALL THING UNDER 0.2 Meters.
        mark_threshold: 0
        observation_sources: scan

        scan:
          topic: scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 12.0 # Half or more of maximum lidar data range
          raytrace_min_range: 0.35 # Lidar is detecting robot elements as obstacle and populating costmap around the robot set param >0.0
          obstacle_max_range: 9.0  # Half or more of maximum lidar data range
          obstacle_min_range: 0.35 # > 0.0 avoid that lidar detect robot elements as obstacle

      sonar_layer:
        plugin: "nav2_costmap_2d::RangeSensorLayer"
        enabled: True
        topics: ["sonar_F_L", "sonar_F_R", "sonar_B_L", "sonar_B_R"]
        phi: 1.2
        no_readings_timeout: 0.0
        mark_threshold: 0.7   # Probability above which cells are marked as occupied. Default 0.8
        inflate_cone: 0.99    # Inflate the triangular area covered by the sensor (percentage, default 1.0)
        clear_on_max_reading: false # default false. Clear on max reading
        input_sensor_type: VARIABLE # Default ALL. ALL (automatic selection), VARIABLE (min range != max range), or FIXED (min range == max range)

        observation_sources: sonar_F_L sonar_F_R sonar_B_L sonar_B_R

        sonar_F_L:
          sensor_frame: sonar_F_L_frame
          data_type: "Range"
          topic: sonar_F_L
          clearing: True
          marking: True
        sonar_F_R:
          sensor_frame: sonar_F_R_frame
          data_type: "Range"
          topic: sonar_F_R
          clearing: True
          marking: True
        sonar_B_L:
          sensor_frame: sonar_B_L_frame
          data_type: "Range"
          topic: sonar_B_L
          clearing: True
          marking: True
        sonar_B_R:
          sensor_frame: sonar_B_R_frame
          data_type: "Range"
          topic: sonar_B_R
          clearing: True
          marking: True

      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True

      always_send_full_costmap: True

# see https://docs.nav2.org/configuration/packages/configuring-costmaps.html
global_costmap:
  global_costmap:
    ros__parameters:
      enable_stamped_cmd_vel: true
      unknown_cost_value: 255 # slightly less than 255 to be more explorative, 0 - to prohibit planning into un-scanned space
      #lethal_cost_threshold: 100
      #Added above to improve slam exploration
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      robot_radius: 0.33
      #footprint: "[[-0.495, -0.388], [-0.495, 0.388], [0.495, 0.388], [0.495, -0.388]]"
      resolution: 0.05
      track_unknown_space: true
      # Try: remove static_layer?
      plugins: ["static_layer", "obstacle_layer", "inflation_layer", "sonar_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: scan
          max_obstacle_height: 1.6
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 12.0 # Maximum lidar data range
          raytrace_min_range: 0.35 # Lidar is detecting robot elements as obstacle and populating costmap around the robot set param >0.0
          obstacle_max_range: 9.0  # Quarter or more of maximum lidar data range
          obstacle_min_range: 0.35 # > 0.0 avoid that lidar detect robot elements as obstacle

      sonar_layer:
        plugin: "nav2_costmap_2d::RangeSensorLayer"
        enabled: True
        topics: ["sonar_F_L", "sonar_F_R", "sonar_B_L", "sonar_B_R"]
        phi: 1.2
        no_readings_timeout: 0.0
        mark_threshold: 0.7   # Probability above which cells are marked as occupied. Default 0.8
        inflate_cone: 0.99    # Inflate the triangular area covered by the sensor (percentage, default 1.0)
        clear_on_max_reading: false # default false. Clear on max reading
        input_sensor_type: VARIABLE # Default ALL. ALL (automatic selection), VARIABLE (min range != max range), or FIXED (min range == max range)

        observation_sources: sonar_F_L sonar_F_R sonar_B_L sonar_B_R

        sonar_F_L:
          sensor_frame: sonar_F_L_frame
          data_type: "Range"
          topic: sonar_F_L
          clearing: True
          marking: True
        sonar_F_R:
          sensor_frame: sonar_F_R_frame
          data_type: "Range"
          topic: sonar_F_R
          clearing: True
          marking: True
        sonar_B_L:
          sensor_frame: sonar_B_L_frame
          data_type: "Range"
          topic: sonar_B_L
          clearing: True
          marking: True
        sonar_B_R:
          sensor_frame: sonar_B_R_frame
          data_type: "Range"
          topic: sonar_B_R
          clearing: True
          marking: True

      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        enabled: true
        subscribe_to_updates: true
        transform_tolerance: 0.5
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: true
        cost_scaling_factor: 3.0
        # see http://wiki.ros.org/costmap_2d/hydro/inflation
        inflation_radius: 0.34  # must be larger than robot footprint
        inflate_unknown: false
        inflate_around_unknown: true
      always_send_full_costmap: True

# see https://docs.nav2.org/configuration/packages/configuring-map-server.html
map_saver:
  ros__parameters:
    enable_stamped_cmd_vel: true
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

# see https://docs.nav2.org/configuration/packages/configuring-planner-server.html
planner_server:
  ros__parameters:
    enable_stamped_cmd_vel: true
    expected_planner_frequency: 12.0
    planner_plugins: ["GridBased"]
    costmap_update_timeout: 1.0
    GridBased:
      plugin: "nav2_navfn_planner::NavfnPlanner"
      tolerance: 0.2
      use_astar: false
      allow_unknown: true

# see https://docs.nav2.org/configuration/packages/configuring-smoother-server.html
smoother_server:
  ros__parameters:
    enable_stamped_cmd_vel: true
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

# See https://docs.nav2.org/configuration/packages/configuring-behavior-server.html
behavior_server:
  ros__parameters:
    enable_stamped_cmd_vel: true  # default false in Jazzy or older
    local_costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 12.0  # Frequency to run behavior plugins.
    action_server_result_timeout: 10.0  # discard a goal handle if a result has not been produced
    behavior_plugins: ["spin", "backup", "drive_on_heading", "wait", "assisted_teleop"]
    spin:
      plugin: "nav2_behaviors::Spin"
    backup:
      plugin: "nav2_behaviors::BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors::DriveOnHeading"
    wait:
      plugin: "nav2_behaviors::Wait"
    assisted_teleop:
      plugin: "nav2_behaviors::AssistedTeleop"
    local_frame: odom
    global_frame: map
    robot_base_frame: base_link
    transform_timeout: 1.0
    transform_tolerance: 0.5  # delay in transform (tf) data that is tolerable in seconds
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0  # rad/s
    min_rotational_vel: 0.4  # rad/s
    rotational_acc_lim: 3.2  # maximum rotational acceleration (rad/s^2)

# See https://robotics.snowcron.com/robotics_ros2/waypoint_follower_theory.htm
                
# The nav2_waypoint_follower namespace includes the following plugins: WaitAtWaypoint PhotoAtWaypoint InputAtWaypoint
# which corresponds to a standard (ROS2 provided) action that the bot should perform when it reaches a waypoint.

waypoint_follower:
  ros__parameters:
    enable_stamped_cmd_vel: true
    loop_rate: 20
    stop_on_failure: false
    action_server_result_timeout: 900.0
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

# See https://docs.nav2.org/configuration/packages/configuring-velocity-smoother.html
#     https://git.tu-berlin.de/ecschuetz/navigation2/-/tree/main/nav2_velocity_smoother
velocity_smoother:
  ros__parameters:
    enable_stamped_cmd_vel: true  # Whether to stamp the velocity. True uses TwistStamped. False uses Twist
    smoothing_frequency: 10.0     # Rate to run smoother
    scale_velocities: false       # scale velocities proportionally if any axis is outside of acceleration range to follow same vector, if possible
    #feedback: "OPEN_LOOP"        # Type of feedback for current speed. Open loop uses the last smoothed output. Closed loop uses robot odometry
    feedback: "CLOSED_LOOP"
    max_velocity: [0.5, 0.0, 2.5]    # Maximum velocities, ordered [Vx, Vy, Vw]
    min_velocity: [-0.5, 0.0, -2.5]  # Minimum velocities, ordered [Vx, Vy, Vw]
    max_accel: [2.5, 0.0, 3.2]       # Maximum acceleration, ordered [Ax, Ay, Aw]
    max_decel: [-2.5, 0.0, -3.2]     # Minimum acceleration, ordered [Ax, Ay, Aw]
    #odom_topic: /odometry/local   # works  # Topic of odometry to use for estimating current velocities
    odom_topic: /diff_cont/odom   # works
    odom_duration: 0.5  # Period of time (s) to sample odometry information in for velocity estimation
    deadband_velocity: [0.0, 0.0, 0.0]  # A deadband of velocities below which they should be zero-ed out for sending to the robot base controller, ordered [Vx, Vy, Vw]
    velocity_timeout: 1.0  # Time (s) after which if no new velocity commands are received to zero out and stop

# see https://docs.nav2.org/configuration/packages/configuring-collision-monitor.html
collision_monitor:
  ros__parameters:
    enable_stamped_cmd_vel: true
    base_frame_id: "base_footprint"
    odom_frame_id: "odom"
    cmd_vel_in_topic: "cmd_vel_smoothed"
    cmd_vel_out_topic: "cmd_vel_nav"
    state_topic: "collision_monitor_state"
    transform_tolerance: 0.5  # delay in transform (tf) data that is tolerable in seconds
    source_timeout: 1.0
    base_shift_correction: True
    stop_pub_timeout: 2.0
    # Polygons represent zone around the robot for "stop", "slowdown" and "limit" action types,
    # and robot footprint for "approach" action type.
    polygons: ["FootprintApproach"]
    FootprintApproach:
      type: "polygon"
      action_type: "approach"
      footprint_topic: "/local_costmap/published_footprint"
      time_before_collision: 1.2
      simulation_time_step: 0.1
      min_points: 6
      visualize: False
      enabled: True
    observation_sources: ["scan"]
    scan:
      type: "scan"
      topic: "scan"
      min_height: 0.15
      max_height: 2.0
      enabled: True

# see https://docs.nav2.org/configuration/packages/configuring-docking-server.html
docking_server:
  ros__parameters:
    enable_stamped_cmd_vel: true
    controller_frequency: 50.0
    initial_perception_timeout: 5.0
    wait_charge_timeout: 5.0
    dock_approach_timeout: 30.0
    undock_linear_tolerance: 0.05
    undock_angular_tolerance: 0.1
    max_retries: 3
    base_frame: "base_link"
    fixed_frame: "odom"
    dock_backwards: false
    dock_prestaging_tolerance: 0.5

    # Types of docks
    dock_plugins: ['simple_charging_dock']
    simple_charging_dock:
      plugin: 'opennav_docking::SimpleChargingDock'
      docking_threshold: 0.05
      staging_x_offset: -0.7
      use_external_detection_pose: true
      use_battery_status: false # true
      use_stall_detection: false # true

      external_detection_timeout: 1.0
      external_detection_translation_x: -0.18
      external_detection_translation_y: 0.0
      external_detection_rotation_roll: -1.57
      external_detection_rotation_pitch: -1.57
      external_detection_rotation_yaw: 0.0
      filter_coef: 0.1

    # Dock instances
    # The following example illustrates configuring dock instances.
    # docks: ['home_dock']  # Input your docks here
    # home_dock:
    #   type: 'simple_charging_dock'
    #   frame: map
    #   pose: [0.0, 0.0, 0.0]

    controller:
      k_phi: 3.0
      k_delta: 2.0
      v_linear_min: 0.15
      v_linear_max: 0.15

# see https://docs.nav2.org/configuration/packages/configuring-loopback-sim.html
loopback_simulator:
  ros__parameters:
    enable_stamped_cmd_vel: true
    base_frame_id: "base_footprint"
    odom_frame_id: "odom"
    map_frame_id: "map"
    scan_frame_id: "laser_frame"
    update_duration: 0.02
